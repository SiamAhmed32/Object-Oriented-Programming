# -*- coding: utf-8 -*-
"""Cse111_Lab-5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/15rmMEpMKErmJryywx8CmjZpIyiD7GtKM

CLASSWORK
"""

#task-1
name_l = []
id_l = []
cg_l = []
class Student:
  def __init__(self,name,id,cg):
    self.name = name
    if id in id_l:
      print("Student with the same ID already exists, Please try with another ID")
      self.f = False
    else:
      self.__id = id
      id_l.append(id)
      self.f = True
    self.__cg = cg
    name_l.append(name)
    cg_l.append(cg)
  def setId(self,id):
    self.__id = id
    self.f = True
    id_l.append(id)

class Department:
  def __init__(self,c):
    self.c = c
  def findStudent(self,id):
    flag = False
    for i in range(len(id_l)):
      if id_l[i] == id:
        print("Student info:")
        print(f'Student Name: {name_l[i]}')
        print("Id:",id_l[i])
        print("CGPA",cg_l[i])
        flag = True
    if flag == False:
        print("Student with this ID doesn't exist, Please give a valid ID")

  def addStudent(self,*args):
      for i in args:
        if i.f==False:
          pass
        else:
          print("Welcome to CSE department,",i.name)
  def details(self):
    print("department name",self.c)
    print("num of students",len(id_l))
    print("details of studnets")
    for i in range(len(id_l)):
      print(f"Student name: {name_l[i]}, ID: {id_l[i]}, cgpa: {cg_l[i]}")


s1 = Student("Akib", 22301010, 3.29)
s2 = Student("Reza", 22101010, 3.45)
s3 = Student("Ruhan", 23101934, 4.00)
print("1==================================")
cse = Department("CSE")
cse.findStudent(22112233)
print("2==================================")
cse.addStudent(s1,s2,s3)
print("3==================================")
cse.details()
print("4==================================")
cse.findStudent(22301010)
print("5==================================")
s4 = Student("Nakib",22301010,3.22)
cse.addStudent(s4)
print("6==================================")
s4.setId(21201220)
cse.addStudent(s4)
print("7==================================")
cse.details()
print("8==================================")
s5 = Student("Sakib",22201010,2.29)
cse.addStudent(s5)
print("9==================================")
cse.details()



class Spaceship:
  def __init__(self,name,capacity):
    self.name = name
    self.capacity = capacity
    self.t = 0
    self.free = capacity
    self.l = []
  def load_cargo(self,c_obj):
    c_obj = c_obj
    obj = c_obj.getName()
    obj1 = c_obj.getWeight()
    if obj1 <= self.capacity:
      self.l.append(obj)
      self.t+=obj1
      self.free -= obj1
    else:
      print(f'Warning: Unable to load  inside {self.name}. Exceeds capacity by {obj1-self.free}.')
  def display_details(self):
    print(f"spaceship Name: {self.name}")
    print(f'capacity: {self.capacity}')
    print(f'current cargo weight: {self.t}')
    print(f'cargo: {self.l}')
class Cargo:
  def __init__(self,name,weight):
    self.__name = name
    self.__weight = weight
  def getName(self):
    return self.__name
  def getWeight(self):
    return self.__weight

# Creating spaceships
falcon = Spaceship("Falcon", 50000)
apollo = Spaceship("Apollo", 100000)
enterprise = Spaceship("Enterprise", 220000)
print("1.===================================")
# Creating cargo
gold = Cargo("Gold", 20000)
platinum = Cargo("Platinum", 25000)
dilithium = Cargo("Dilithium", 50000)
trilithium = Cargo("Trilithium", 70000)
neutronium = Cargo("Neutronium", 80000)
print("2.===================================")
# Loading cargo onto spaceships
falcon.load_cargo(gold)
falcon.load_cargo(platinum)
falcon.display_details()
print("3.===================================")
apollo.load_cargo(gold)  # Apollo will not reach its total capacity
apollo.display_details()
print("4.===================================")
falcon.load_cargo(neutronium)  # This should exceed Falcon's capacity
print("5.===================================")
enterprise.load_cargo(dilithium)
enterprise.load_cargo(trilithium)
enterprise.load_cargo(neutronium)  # This should not exceed Enterprise's capacity
enterprise.display_details()

#task-3
class Song:
  def __init__(self,*args): # args =
    self.flag = True
    if len(args) == 3:
      self.__title = args[0]
      self.__artist = args[1]
      self.__duration = args[2]
    elif len(args) == 2:
      self.__title = args[0]
      self.__duration = args[1]
      self.__artist = 'Unknown Artist'
    else:
      self.__artist = 'Unknown Artist'
      self.flag = False

  def info(self):
    if self.flag == True:
      min = self.__duration//60
      sec =  self.__duration%60
      return f'{self.__title} by {self.__artist} ({min}:{sec})'
    else:
      self.flag = True
      return f'cannot create song without title and duration! \n ---Error --- by --- Error --- (0:0)'
  def set_title(self,a):
    self.__title = a
  def set_duration(self,a):
    self.__duration = a
  def set_artist(self,a):
    self.__artist = a

class Playlist:
  def __init__(self,*args): #args = ["Classical Orchestra", s1, s2, s3]
    self.__name = args[0]
    self.__song_list = list(args[1:])
    # self.__song_list = []
    # for i in range(1,len(args)):
      # self.__song_list.append(args[i])
    self.__now_id = -1
  def show_playlist(self):
    print(f'playlist: {self.__name}')
    print(f'total songs {len(self.__song_list)}')
    for i in range(len(self.__song_list)): # i = 0,  = s1
      n = self.__song_list[i].info()
      self.__now_id += 1 # 0
      print(f'{i+1}. {n}')
  def play_next(self):
    if len(self.__song_list)-1 == self.__now_id:  # ["a","b","c"]  = 2
      self.__now_id = 0
      print(f'now playing: {self.__song_list[self.__now_id].info()}')
    else:
      self.__now_id += 1
      if len(self.__song_list) == self.__now_id:
        print("reached")
        self.__now_id = 0
        print('now playing',self.__song_list[self.__now_id].info())
      else:
        print(f'now playing: {self.__song_list[self.__now_id].info()}')
  def play_prev(self):
    if self.__now_id==0:
      print("error")
      print(f'now playing{self.__song_list[self.__now_id].info()}')
    else:
      self.__now_id -= 1
      print(self.__song_list[self.__now_id].info())
  def add_songs(self,s4):
    self.__song_list.append(s4)
    print('added')
  def remove_song(self,x):
     self.__song_list.remove(x)


s1 = Song("The Flower Duet", "Leo Delibes", 86)
print(s1.info())
# Output:
# The Flower Duet by Leo Delibes (1:26)

print('===============')
s2 = Song("Winter")
print(s2.info())
# Output:
# Cannot create song without title and duration!
# --- Error --- by --- Error --- (0:0)

print('===============')
s2.set_title("Winter")
s2.set_duration(223)
s2.set_artist("Vivaldi")
print(s2.info())
# Output:
# Winter by Vivaldi (3:43)

print('===============')
s3 = Song("Ride of the Valkyries", "Wagner", 137)
s4 = Song("Russian Dance - Nutcracker", 71)

p1 = Playlist("Classical Orchestra", s1, s2, s3)
p1.show_playlist()
# Output:
# Playlist: Classical Orchestra
# Total Songs: 3
# 1. The Flower Duet by Leo Delibes (1:26)
# 2. Winter by Vivaldi (3:43)
# 3. Ride of the Valkyries by Wagner (2:17)

print('===============')
p1.play_next()
# Output:
# Now playing: The Flower Duet by Leo Delibes (1:26)

print('===============')
p1.play_prev()
# Output:
# Cannot go to previous from the first song.
# Now playing: The Flower Duet by Leo Delibes (1:26)

print('===============')
p1.play_next()
# Output:
# Now playing: Winter by Vivaldi (3:43)

print('===============')
p1.play_next()
# Output:
# Now playing: Ride of the Valkyries by Wagner (2:17)

print('===============')
p1.play_next()
# Output:
# Reached the end of the playlist, starting from the first song.
# Now playing: The Flower Duet by Leo Delibes (1:26)

print('===============')
p1.play_next()
# Output:
# Now playing: Winter by Vivaldi (3:43)

print('===============')
p1.add_songs(s4)
# Output:
# Added 1 song(s) to the playlist Classical Orchestra

print('===============')
p1.play_next()
# Output:
# Now playing: Ride of the Valkyries by Wagner (2:17)

print('===============')
p1.play_next()
# Output:
# Now playing: Russian Dance - Nutcracker by Unknown Artist (1:11)

print('===============')
p1.play_prev()
# Output:
# Now playing: Ride of the Valkyries by Wagner (2:17)

print('===============')
p1.show_playlist()
# Output:
# Playlist: Classical Orchestra
# Total Songs: 4
# 1. The Flower Duet by Leo Delibes (1:26)
# 2. Winter by Vivaldi (3:43)
# 3. Ride of the Valkyries by Wagner (2:17)
# 4. Russian Dance - Nutcracker by Unknown Artist (1:11)







"""HOMEWORK"""

# Task-1
class Book:
  def __init__(self,title,author,genre):
    self.__title = title
    self.__author = author
    self.__genre = genre
    self.__borrower = None
    self.__available = False
  def set_title(self,title):
    self.__title = title
  def set_author(self,author):
    self.__author = author
  def set_genre(self,genre):
    self.__genre = genre
  def set_borrower(self,id):
    self.__borrower = id
  def set_availablity(self,available):
    self.__available = available
  def get_title(self):
    return self.__title
  def get_author(self):
    return self.__author
  def get_genre(self):
    return self.__genre
  def  get_borrower(self):
    return self.__borrower
  def get_availablity(self):
    return self.__available

class LibraryMember:
  def __init__(self,member_id,name):
    self.__member_id = member_id
    self.__name = name
    self.__borrowed_books = []
  def borrow_book(self,book):
    self.__borrowed_books.append(book)
    book.set_borrower(self.__member_id)
  def display_borrowed_books(self):
    for i in self.__borrowed_books:
      print(f"Books borrowed by {self.__name}")
      print(f"Title: {i.get_title()}")
      print(f"author: {i.get_author()}")
      print(f"genre: {i.get_genre()}")
      print(f"Available: {i.get_availablity()}")
      print("---------------------------")
  def return_book(self,book):
    self.__borrowed_books.remove(book)
    book.set_borrower(None)
    book.set_availablity(True)



class Library:
  def __init__(self):
    self.__books_available = []
    self.__library_members = []
  def add_book(self,book):
    self.__books_available.append(book)
  def add_library_member(self,member):
    self.__library_members.append(member)
  def display_book_list(self):
    for i in self.__books_available:
      print("All the books in library are:")
      print(f"Title: {i.get_title()}")
      print(f"author: {i.get_author()}")
      print(f"genre: {i.get_genre()}")
      print(f"Available:  {i.get_availablity()}")
      print(f"borrowed by: {i.get_borrower()}")
      print("----------------------")



book1 = Book("Harry Potter and the Chamber of Secrets", "J.K. Rowling", "Fiction")
book2 = Book("Nothing Lasts Forever", "Sidney Sheldon", "Fiction")
book3 = Book("Calculus", "Gilbert Strang", "Education")

# Create LibraryMember objects
member1 = LibraryMember("LM01", "Tom Cruise")
member2 = LibraryMember("LM02", "Brad Pitt")

# Create Library object
library = Library()

# Add books to the library
library.add_book(book1)
library.add_book(book2)
library.add_book(book3)

# Add library members
library.add_library_member(member1)
library.add_library_member(member2)

# Library members borrow books
member1.borrow_book(book1)
member1.borrow_book(book2)
member2.borrow_book(book3)

# Display all books in the library
library.display_book_list()
print("1======================================")

# Display library members and their borrowed books
member1.display_borrowed_books()
print("2======================================")
member2.display_borrowed_books()
print("3======================================")
# Returning book2 by member 1
member1.return_book(book2)
print("4======================================")
# Display library member1's borrowed books
member1.display_borrowed_books()
# Display all books in the library
library.display_book_list()

class A:
  def __init__(self):
    self.a = 1
    self.b = None
class B:
  def __init__(self):
    self.c = 3
  def d(self,e):
    h = e
    e.b = 3
f = A()
g = B()
g.d(f)
print(f.b)

