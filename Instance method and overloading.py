# -*- coding: utf-8 -*-
"""cse11_Lab_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zWYqgAHAVstDtzniAC4nJ8LGoW0syxAB
"""

class Customer:
  def __init__(self):
    self.count = 0
    self.total = 0
    print("Welcome to ABC Memorial Park")
  def buyTicket(self,name,age):
    if self.count > 3:
      print("You can't buy more than 3 tickets")
    else:
      print(f"Successfully purchased a ticket for, {name}!")
      self.count += 1
      if age > 10:
        self.total += 100
      else:
        self.total += 50
  def showDetails(self):
    print(f"amount of tickets: {self.count}")
    print(f"total price: {self.total} Taka")
print('1-------------------------')
customer1 = Customer()
print('2-------------------------')
customer1.buyTicket('Bob', 23)
customer1.buyTicket('Henry', 7)
customer1.buyTicket('Alexa', 30)
customer1.buyTicket('Jonas', 43)
print('3-------------------------')
customer1.showDetails()
print('4-------------------------')
customer2 = Customer()
print('5-------------------------')
customer2.buyTicket('Harry', 60)
customer2.buyTicket('Tomas', 28)
print('6-------------------------')
customer2.showDetails()



class SentenceAnalyzer:
  def __init__(self,w=None):
    self.word = 0
    if w!=None:
      for i in w:
        if i == " ":
          self.word+=1
      self.word+=1
  def set_sentence(self,w):
      for i in w:
        if i == " ":
          self.word+=1
      self.word+=1
  def get_word_count(self,c=None):
    if c==None:
      print("Number of words in the sentence:",self.word)
    else:
      print("Number of words in the sentence:",c)
analyzer1 = SentenceAnalyzer()

analyzer1.set_sentence("That's an easy one")
print("1--------------------------")
analyzer1.get_word_count()
print("2--------------------------")
analyzer2 = SentenceAnalyzer("Like I said it's easy")


print("3--------------------------")
analyzer2.get_word_count()


print("4--------------------------")
analyzer2.get_word_count(4)
print("5--------------------------")
analyzer1.get_word_count(5)

#task-3
class Student:
  def __init__(self,name,cgpa,c=9,department="CSE"):
    self.name = name
    self.cgpa = cgpa
    self.c = c
    self.dept = department
    self.ss = None
  def checkScholarshipEligibility(self):
    if self.cgpa >=3.5 and self.c > 10:
      if self.cgpa <3.7:
        print(f"{self.name} is eligible for Need-based scholarship.")
        self.ss = "Need-based scholarship"
      else:
        print(f"{self.name} is eligible for Merit-based scholarship.")
        self.ss = "Merit-based scholarship"
    else:
      print(f"{self.name} is not eligible for scholarship.")
      self.ss = "No scholarship"
  def showDetails(self):
    print(f"name: {self.name}")
    print(f"cgpa: {self.cgpa}")
    print(f"department: {self.dept}")
    print(f"number of credits {self.c}")
    print(f"scholarship status {self.ss}")
print('--------------------------')
std1 = Student("Alif", 3.99, 12)
print('--------------------------')
std1.checkScholarshipEligibility()
print('--------------------------')
std1.showDetails()
print('--------------------------')
std2 = Student("Mim", 3.4)
std3 = Student("Henry", 3.5, 15,"BBA")
print('--------------------------')
std2.checkScholarshipEligibility()
print('--------------------------')
std3.checkScholarshipEligibility()
print('--------------------------')
std2.showDetails()
print('--------------------------')
std3.showDetails()
print('--------------------------')
std4 = Student("Bob", 4.0, 6, "CSE")
print('--------------------------')
std4.checkScholarshipEligibility()
print('--------------------------')
std4.showDetails()

#task-4
class Author():
  def __init__(self,name = None):
    self.name = name
    self.typ = {}
    if name == None:
      print("A book can not be added without author name")
  def setName(self,name):
    self.name = name
  def addBook(self,book,typ):
    if len(self.typ)!=0:
      flag = False
      for i,j in self.typ.items():
        if type(j)==str:
          if j == book:
            flag = True
        else:
            for x in j:
              if x == book:
                flag = True
      if flag == False:
        if typ in self.typ:
          l = []
          if type(self.typ[typ])==str:
            l.append(self.typ[typ])
          else:
            for i,j in self.typ.items():
              for x in j:
                l.append(x)
          l.append(book)
          self.typ[typ]=l
        else:
          self.typ[typ]=book
    else:
        self.typ[typ]=book
  def printDetail(self):
    c = 0
    for i in self.typ.values():
      if type(i)==str:
        c+=1
      else:
        for x in i:
          c+=1
    print(f"number of books {c}")
    print("Author name",self.name)
    for i,j in self.typ.items():
      if type(j)==str:
        print(i,":",j)
      else:
        a = ""
        for x in j:
          a+=x+", "
        print(f"{i}:{a[:-2]}")

a1 = Author()
print("===============================")
a1.addBook("Ice", "Science Fiction")
print("===============================")
a1.setName("Anna Kavan")
a1.addBook("Ice", "Science Fiction")
a1.printDetail()
print("===============================")
a2 = Author("Humayun Ahmed")
a2.addBook("Onnobhubon","Science Fiction")
a2.addBook("Megher Upor Bari", "Horror")
print("===============================")
a2.printDetail()
a2.addBook("Ireena", "Science Fiction")
print("===============================")
a2.printDetail()
print("===============================")

#task-5
class TaxiLagbe:
  def __init__(self,info,area):
    self.info = info
    self.area = area
    self.l = []
    self.t = 0
  def addPassenger(self,*args):
    if len(self.l) < 4:
      for i in range(len(args)):
        n = ""
        for j in range(len(args[i])):
          if args[i][j] == "_":
            break
          else:
            n+=args[i][j]
        self.l.append(n)
        print(f"Dear {n}! Welcome to TaxiLagbe.")
        self.t+=int(args[i][j+1:])
    else:
      print(f"Taxi Full! No more passengers can be added.")
  def printDetails(self):
    print(f"Trip info for Taxi number: {self.info}")
    print(f"This taxi can only cover the {self.area} area")
    print(f"Total passengers: {len(self.l)}")
    print("Passenger lists:")
    for i in range(len(self.l)-1):
      print(self.l[i],end=", ")
    print(self.l[-1])
    print("Total collected Fair:",self.t)


taxi1 = TaxiLagbe('1010-01', 'Dhaka')
print('-------------------------------')
taxi1.addPassenger('Walker_100', 'Wood_200','Matt_100')
taxi1.addPassenger('Wilson_105')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi1.addPassenger('Karen_200')
print('-------------------------------')
taxi1.printDetails()
print('-------------------------------')
taxi2 = TaxiLagbe('1010-02', 'Khulna')
taxi2.addPassenger('Ronald_115', 'Parker_215')
print('-------------------------------')
taxi2.printDetails()

"""Homework-1

"""

#task-1
class HackathonTeam:
  def __init__(self,*args):
    self.team=args[0]
    self.member=[]
    if len(args) < 5:
      for i in range(1,len(args)):
        self.member.append(args[i])
    else:
      for i in range(1,4):
        self.member.append(args[i])
  def information(self):
    print(f"team name: {self.team}")
    print("participants")
    for i in self.member:
      print(i)

team_1 = HackathonTeam("Atlantean", "Aquaman")
team_1.information()

print("=================")

team_2 = HackathonTeam("Avengers", "Ironman", "Thor", "Hulk")
team_2.information()


print("=================")

team_3 = HackathonTeam("X-Men", "Storm", "Mystique")
team_3.information()

#task-5
class Department:
  def __init__(self,dep="che department",sec = 5):
    self.dep = dep
    self.sec = sec
    self.total = 0
    print(f"{self.dep} has {self.sec} sections.")
  def add_students(self,*args):
    if len(args)!=self.sec:
      print(f"The {self.dep} doesn't have {len(args)} sections")
    else:
      for i in range(len(args)):
        self.total+=args[i]
      print(f"The {self.dep} has an average of {round((self.total/self.sec),2)} students in each section.")
  def merge_Department(self,*args):
    for i in args:
      print(f"{self.dep} is merged to Engineering Department.")
      self.total += i.total
    print(f"Now the Engineering Department has an average of {round((self.total/self.sec),2)} students in each section")
d1 = Department()
print('1-----------------------------------')
d2 = Department('MME Department')
print('2-----------------------------------')
d3 = Department('NCE Department', 8)
print('3-----------------------------------')
d1.add_students(12, 23, 12, 34, 21)
print('4-----------------------------------')
d2.add_students(40, 30, 21)
print('5-----------------------------------')
d3.add_students(12, 34, 41, 17, 30, 22, 32, 51)
print('6-----------------------------------')
mega = Department('Engineering Department', 10)
print('7-----------------------------------')
mega.add_students(21,30,40,36,10,32,27,51,45,15)
print('8-----------------------------------')
print(mega.merge_Department(d1, d2))
print('9-----------------------------------')
print(mega.merge_Department(d3))

class StudentRoutineGenerator:
  def __init__(self,name,course):
    self.name = name
    self.course=course
    self.routine =  {'Sat/Thurs': {}, 'Sun/Tue': {}, 'Mon/Wed': {}}
    self.t = 0
    print("name:",self.name)
    print("Maximum Number of Courses:",self.course)
    print("initial routine",self.routine)
  def addCourses(self,*args):
    self.t+=len(args)
    if self.t > self.course:
      print(f"you can't take more than {self.course} courses")
    else:
      for i in args:
        a = i.split("-")
        c = True
        for p,q in self.routine.items():
          for x,y in self.routine[p].items():
            if a[0] == y:
              print(f"you already have {a[0]} in your routine")
              c = False
        if c == True:
          for p,q in self.routine.items():
            if p == a[1]:
              for x,y in self.routine[p].items():
                  if x ==a[2]:
                      print(f"Can't take {a[0]}. It's clashing with your {self.routine[p][x]}")
                      c = False
        if c == True:
          s = a[2]
          d = a[1]
          for p,q in self.routine.items():
            #for x,y in self.routine[p].items():
              self.routine[d][s]=a[0]
              print(f"Successfully added {a[0]}!")
              break
  def showRoutine(self):
    print("Updated Routine:")
    print(self.routine)
    print("routine Details")
    for i,j in self.routine.items():
      if len(j)>0:
        print(i,":")
        for x,y in self.routine[i].items():
          print(x,"-",y)
  def dropCourse(self,drop):
    c = True
    m = ""
    n = ""
    for i,j in self.routine.items():
      for x,y in self.routine[i].items():
        if drop == y:
          c = False
          m = i
          n = x
    if c==False:
      self.routine[m].pop(n)
      print(f"Successfully dropped {drop}")
    else:
      print('No such course in your routine')


print('##################################')
st1 = StudentRoutineGenerator('Harry', 4)
print('------------------------------')
st1.addCourses('CSE110-Mon/Wed-12:30', 'MAT110-Mon/Wed-2:00')
st1.addCourses('ENG101-Sun/Tue-12:30', 'CSE110-Mon/Wed-9:30')
st1.addCourses('PHY111-Sun/Tue-12:30')
print('------------------------------')
st1.showRoutine()
print('------------------------------')
st1.dropCourse('CSE110')
st1.dropCourse('PHY112')
print('------------------------------')
st1.showRoutine()
print('##################################')
st2 = StudentRoutineGenerator('John', 3)
print('------------------------------')
st2.addCourses('MAT110-Mon/Wed-8:00')
st2.addCourses('ENG101-Sat/Thurs-12:30', 'CSE110-Sun/Tue-9:30')
st2.addCourses('PHY111-Sun/Tue-12:30')
print('------------------------------')
st2.showRoutine()

d = {"a":{'b':1,"e":2},"c":{"f":5}}
for i,j in d.items():
  for x,y in d[i].items():
    m = i
    n = x
#d.pop(m,n)
d["a"].pop("b")
print(d)

a = 'CSE110-Mon/Wed-12:30'
print(a.split("-"))

